{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import datasets\n",
    "import pandas as pd\n",
    "\n",
    "boston = datasets.load_boston()\n",
    "X = boston['data']\n",
    "Y = boston['target']\n",
    "df = pd.DataFrame(X, columns=boston['feature_names'])\n",
    "df['target'] = boston['target']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CRIM</th>\n",
       "      <th>ZN</th>\n",
       "      <th>INDUS</th>\n",
       "      <th>CHAS</th>\n",
       "      <th>NOX</th>\n",
       "      <th>RM</th>\n",
       "      <th>AGE</th>\n",
       "      <th>DIS</th>\n",
       "      <th>RAD</th>\n",
       "      <th>TAX</th>\n",
       "      <th>PTRATIO</th>\n",
       "      <th>B</th>\n",
       "      <th>LSTAT</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.00632</td>\n",
       "      <td>18.0</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.538</td>\n",
       "      <td>6.575</td>\n",
       "      <td>65.2</td>\n",
       "      <td>4.0900</td>\n",
       "      <td>1.0</td>\n",
       "      <td>296.0</td>\n",
       "      <td>15.3</td>\n",
       "      <td>396.90</td>\n",
       "      <td>4.98</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.02731</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>6.421</td>\n",
       "      <td>78.9</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>17.8</td>\n",
       "      <td>396.90</td>\n",
       "      <td>9.14</td>\n",
       "      <td>21.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.02729</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>7.185</td>\n",
       "      <td>61.1</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>17.8</td>\n",
       "      <td>392.83</td>\n",
       "      <td>4.03</td>\n",
       "      <td>34.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.03237</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>6.998</td>\n",
       "      <td>45.8</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>18.7</td>\n",
       "      <td>394.63</td>\n",
       "      <td>2.94</td>\n",
       "      <td>33.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.06905</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>7.147</td>\n",
       "      <td>54.2</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>18.7</td>\n",
       "      <td>396.90</td>\n",
       "      <td>5.33</td>\n",
       "      <td>36.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      CRIM    ZN  INDUS  CHAS    NOX     RM   AGE     DIS  RAD    TAX  \\\n",
       "0  0.00632  18.0   2.31   0.0  0.538  6.575  65.2  4.0900  1.0  296.0   \n",
       "1  0.02731   0.0   7.07   0.0  0.469  6.421  78.9  4.9671  2.0  242.0   \n",
       "2  0.02729   0.0   7.07   0.0  0.469  7.185  61.1  4.9671  2.0  242.0   \n",
       "3  0.03237   0.0   2.18   0.0  0.458  6.998  45.8  6.0622  3.0  222.0   \n",
       "4  0.06905   0.0   2.18   0.0  0.458  7.147  54.2  6.0622  3.0  222.0   \n",
       "\n",
       "   PTRATIO       B  LSTAT  target  \n",
       "0     15.3  396.90   4.98    24.0  \n",
       "1     17.8  396.90   9.14    21.6  \n",
       "2     17.8  392.83   4.03    34.7  \n",
       "3     18.7  394.63   2.94    33.4  \n",
       "4     18.7  396.90   5.33    36.2  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "w0 -= q0*0.01"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "592.1469169960473\n",
      "202.42645949308618\n",
      "137.83685197987685\n",
      "125.1667018129492\n",
      "120.05155154650195\n",
      "116.31340456516637\n",
      "113.05472756830312\n",
      "110.11732157662186\n",
      "107.45283199652641\n",
      "105.0324700376974\n",
      "102.8329163411257\n",
      "100.83364803940306\n",
      "99.0162103558175\n",
      "97.36390032741672\n",
      "95.86156688440826\n",
      "94.49545540613806\n",
      "93.25307512264533\n",
      "92.1230816221553\n",
      "91.09517116173846\n",
      "90.1599850320256\n",
      "89.30902281995522\n",
      "88.53456367108681\n",
      "87.82959478875982\n",
      "87.18774649613427\n",
      "86.60323325561077\n",
      "86.07080009799611\n",
      "85.58567396484183\n",
      "85.14351951320765\n",
      "84.7403989735513\n",
      "84.37273568901433\n",
      "84.03728099847999\n",
      "83.73108415674541\n",
      "83.45146501327699\n",
      "83.19598919656133\n",
      "82.96244557426562\n",
      "82.74882578049554\n",
      "82.55330562057917\n",
      "82.37422818119026\n",
      "82.21008848941665\n",
      "82.05951957872114\n",
      "81.92127983277196\n",
      "81.79424148994684\n",
      "81.67738020207182\n",
      "81.56976555070771\n",
      "81.47055243317189\n",
      "81.3789732385299\n",
      "81.29433074111353\n",
      "81.21599164575798\n",
      "81.14338072499332\n",
      "81.07597549389952\n",
      "81.01330137332076\n",
      "80.9549272966474\n",
      "80.9004617194918\n",
      "80.84954899530416\n",
      "80.80186608337357\n",
      "80.7571195587281\n",
      "80.7150428962471\n",
      "80.67539400384297\n",
      "80.63795298186406\n",
      "80.60252008797708\n",
      "80.56891388868337\n",
      "80.53696958035297\n",
      "80.50653746423077\n",
      "80.47748156129369\n",
      "80.44967835413449\n",
      "80.42301564422287\n",
      "80.39739151395982\n",
      "80.372713383921\n",
      "80.34889715655272\n",
      "80.32586643839772\n",
      "80.30355183364513\n",
      "80.28189030246658\n",
      "80.26082457819479\n",
      "80.24030263794981\n",
      "80.22027722181124\n",
      "80.20070539608353\n",
      "80.181548156612\n",
      "80.16277006847506\n",
      "80.14433893871941\n",
      "80.12622551910479\n",
      "80.10840323610766\n",
      "80.09084794568537\n",
      "80.07353771052709\n",
      "80.05645259773273\n",
      "80.03957449504348\n",
      "80.02288694392492\n",
      "80.00637498795571\n",
      "79.99002503511969\n",
      "79.97382473272478\n",
      "79.95776285379239\n",
      "79.94182919386385\n",
      "79.92601447727043\n",
      "79.91031027199637\n",
      "79.89470891235081\n",
      "79.87920342872836\n",
      "79.86378748381162\n",
      "79.84845531462237\n",
      "79.8332016798871\n",
      "79.81802181222854\n",
      "79.80291137474035\n",
      "79.78786642154377\n",
      "79.772883361961\n",
      "79.75795892797336\n",
      "79.74309014466203\n",
      "79.7282743033615\n",
      "79.71350893727143\n",
      "79.69879179930624\n",
      "79.68412084197557\n",
      "79.66949419910851\n",
      "79.6549101692536\n",
      "79.64036720060088\n",
      "79.62586387728594\n",
      "79.61139890694979\n",
      "79.59697110943884\n",
      "79.58257940654123\n",
      "79.56822281266292\n",
      "79.55390042636051\n",
      "79.53961142264713\n",
      "79.5253550460067\n",
      "79.51113060404693\n",
      "79.49693746173318\n",
      "79.48277503615299\n",
      "79.46864279175874\n",
      "79.4545402360466\n",
      "79.44046691563243\n",
      "79.42642241268538\n",
      "79.41240634169057\n",
      "79.39841834650613\n",
      "79.38445809769203\n",
      "79.37052529008213\n",
      "79.35661964057867\n",
      "79.34274088615011\n",
      "79.32888878201064\n",
      "79.31506309996824\n",
      "79.30126362692235\n",
      "79.28749016350004\n",
      "79.27374252281729\n",
      "79.26002052935273\n",
      "79.24632401792536\n",
      "79.23265283276571\n",
      "79.21900682667109\n",
      "79.20538586024024\n",
      "79.19178980117556\n",
      "79.17821852365047\n",
      "79.1646719077353\n",
      "79.1511498388737\n",
      "79.13765220740915\n",
      "79.12417890815317\n",
      "79.11072983999374\n",
      "79.09730490553903\n",
      "79.08390401079471\n",
      "79.07052706486907\n",
      "79.05717397970673\n",
      "79.04384466984577\n",
      "79.0305390521972\n",
      "79.01725704584365\n",
      "79.00399857185933\n",
      "78.99076355314212\n",
      "78.97755191426535\n",
      "78.96436358133879\n",
      "78.95119848188658\n",
      "78.93805654473239\n",
      "78.92493769989814\n",
      "78.91184187850949\n",
      "78.89876901271194\n",
      "78.88571903559301\n",
      "78.87269188111192\n",
      "78.85968748403627\n",
      "78.84670577988385\n",
      "78.83374670486938\n",
      "78.82081019585729\n",
      "78.80789619031701\n",
      "78.79500462628421\n",
      "78.78213544232374\n",
      "78.7692885774972\n",
      "78.7564639713332\n",
      "78.74366156379894\n",
      "78.73088129527669\n",
      "78.71812310654009\n",
      "78.70538693873429\n",
      "78.69267273335662\n",
      "78.67998043223972\n",
      "78.66730997753557\n",
      "78.65466131170162\n",
      "78.64203437748792\n",
      "78.6294291179244\n",
      "78.61684547631098\n",
      "78.60428339620681\n",
      "78.59174282142227\n",
      "78.57922369600962\n",
      "78.56672596425605\n",
      "78.55424957067632\n",
      "78.5417944600069\n",
      "78.52936057720001\n",
      "78.51694786741776\n",
      "78.50455627602798\n",
      "78.49218574859941\n",
      "78.4798362308972\n",
      "78.46750766887953\n",
      "78.45520000869415\n",
      "78.44291319667481\n",
      "78.43064717933848\n",
      "78.41840190338242\n",
      "78.40617731568187\n",
      "78.39397336328734\n",
      "78.38178999342257\n",
      "78.36962715348265\n",
      "78.35748479103175\n",
      "78.34536285380138\n",
      "78.3332612896894\n",
      "78.3211800467573\n",
      "78.30911907322978\n",
      "78.2970783174928\n",
      "78.28505772809207\n",
      "78.27305725373294\n",
      "78.26107684327808\n",
      "78.24911644574658\n",
      "78.23717601031358\n",
      "78.22525548630847\n",
      "78.21335482321464\n",
      "78.20147397066796\n",
      "78.18961287845661\n",
      "78.17777149651947\n",
      "78.16594977494594\n",
      "78.15414766397484\n",
      "78.14236511399403\n",
      "78.13060207553946\n",
      "78.11885849929438\n",
      "78.10713433608866\n",
      "78.09542953689873\n",
      "78.083744052846\n",
      "78.07207783519722\n",
      "78.06043083536314\n",
      "78.0488030048983\n",
      "78.03719429550037\n",
      "78.02560465900969\n",
      "78.01403404740843\n",
      "78.00248241282047\n",
      "77.99094970751044\n",
      "77.97943588388377\n",
      "77.96794089448535\n",
      "77.95646469199981\n",
      "77.94500722925075\n",
      "77.93356845920019\n",
      "77.9221483349478\n",
      "77.91074680973114\n",
      "77.8993638369246\n",
      "77.88799937003913\n",
      "77.87665336272173\n",
      "77.86532576875518\n",
      "77.8540165420573\n",
      "77.84272563668046\n",
      "77.83145300681173\n",
      "77.82019860677137\n",
      "77.80896239101374\n",
      "77.79774431412551\n",
      "77.78654433082623\n",
      "77.77536239596758\n",
      "77.76419846453244\n",
      "77.7530524916353\n",
      "77.74192443252159\n",
      "77.73081424256647\n",
      "77.71972187727567\n",
      "77.70864729228404\n",
      "77.69759044335592\n",
      "77.68655128638402\n",
      "77.67552977738966\n",
      "77.66452587252171\n",
      "77.65353952805678\n",
      "77.64257070039831\n",
      "77.63161934607663\n",
      "77.62068542174822\n",
      "77.60976888419573\n",
      "77.5988696903265\n",
      "77.58798779717375\n",
      "77.57712316189503\n",
      "77.56627574177222\n",
      "77.55544549421097\n",
      "77.54463237674051\n",
      "77.53383634701338\n",
      "77.52305736280452\n",
      "77.51229538201125\n",
      "77.50155036265313\n",
      "77.49082226287108\n",
      "77.48011104092691\n",
      "77.46941665520397\n",
      "77.45873906420522\n",
      "77.44807822655417\n",
      "77.43743410099393\n",
      "77.42680664638686\n",
      "77.41619582171411\n",
      "77.40560158607556\n",
      "77.39502389868936\n",
      "77.38446271889096\n",
      "77.37391800613389\n",
      "77.36338971998845\n",
      "77.35287782014159\n",
      "77.34238226639663\n",
      "77.33190301867299\n",
      "77.32144003700556\n",
      "77.31099328154464\n",
      "77.30056271255519\n",
      "77.29014829041698\n",
      "77.27974997562389\n",
      "77.26936772878346\n",
      "77.25900151061674\n",
      "77.24865128195803\n",
      "77.23831700375432\n",
      "77.227998637065\n",
      "77.21769614306159\n",
      "77.20740948302705\n",
      "77.19713861835616\n",
      "77.18688351055413\n",
      "77.17664412123749\n",
      "77.16642041213274\n",
      "77.15621234507616\n",
      "77.14601988201414\n",
      "77.13584298500203\n",
      "77.12568161620422\n",
      "77.11553573789381\n",
      "77.1054053124521\n",
      "77.09529030236835\n",
      "77.08519067023927\n",
      "77.07510637876919\n",
      "77.065037390769\n",
      "77.0549836691567\n",
      "77.04494517695588\n",
      "77.03492187729664\n",
      "77.02491373341454\n",
      "77.01492070865025\n",
      "77.0049427664498\n",
      "76.99497987036335\n",
      "76.98503198404583\n",
      "76.97509907125576\n",
      "76.9651810958556\n",
      "76.95527802181113\n",
      "76.945389813191\n",
      "76.93551643416669\n",
      "76.92565784901225\n",
      "76.91581402210328\n",
      "76.90598491791755\n",
      "76.89617050103418\n",
      "76.88637073613329\n",
      "76.87658558799592\n",
      "76.86681502150371\n",
      "76.85705900163825\n",
      "76.84731749348096\n",
      "76.83759046221329\n",
      "76.82787787311544\n",
      "76.81817969156674\n",
      "76.80849588304521\n",
      "76.79882641312709\n",
      "76.78917124748668\n",
      "76.7795303518964\n",
      "76.76990369222517\n",
      "76.76029123443998\n",
      "76.75069294460415\n",
      "76.74110878887792\n",
      "76.73153873351716\n",
      "76.72198274487384\n",
      "76.71244078939608\n",
      "76.70291283362687\n",
      "76.69339884420411\n",
      "76.68389878786088\n",
      "76.67441263142436\n",
      "76.66494034181608\n",
      "76.65548188605158\n",
      "76.64603723123933\n",
      "76.63660634458199\n",
      "76.62718919337445\n",
      "76.61778574500495\n",
      "76.60839596695354\n",
      "76.59901982679291\n",
      "76.58965729218731\n",
      "76.58030833089283\n",
      "76.5709729107567\n",
      "76.56165099971686\n",
      "76.55234256580265\n",
      "76.5430475771332\n",
      "76.53376600191824\n",
      "76.52449780845726\n",
      "76.51524296513922\n",
      "76.50600144044282\n",
      "76.49677320293517\n",
      "76.48755822127293\n",
      "76.47835646420052\n",
      "76.46916790055121\n",
      "76.45999249924606\n",
      "76.45083022929364\n",
      "76.44168105979008\n",
      "76.43254495991873\n",
      "76.42342189894971\n",
      "76.4143118462399\n",
      "76.40521477123235\n",
      "76.39613064345636\n",
      "76.38705943252701\n",
      "76.37800110814491\n",
      "76.36895564009593\n",
      "76.35992299825112\n",
      "76.35090315256615\n",
      "76.34189607308136\n",
      "76.33290172992099\n",
      "76.32392009329386\n",
      "76.31495113349197\n",
      "76.30599482089114\n",
      "76.2970511259501\n",
      "76.28812001921075\n",
      "76.27920147129782\n",
      "76.27029545291822\n",
      "76.26140193486114\n",
      "76.25252088799816\n",
      "76.2436522832816\n",
      "76.234796091746\n",
      "76.22595228450697\n",
      "76.21712083276091\n",
      "76.20830170778513\n",
      "76.19949488093678\n",
      "76.1907003236542\n",
      "76.1819180074548\n",
      "76.1731479039362\n",
      "76.16438998477534\n",
      "76.15564422172841\n",
      "76.14691058663031\n",
      "76.13818905139517\n",
      "76.12947958801524\n",
      "76.12078216856113\n",
      "76.11209676518162\n",
      "76.10342335010301\n",
      "76.09476189562909\n",
      "76.08611237414135\n",
      "76.07747475809799\n",
      "76.06884902003397\n",
      "76.06023513256129\n",
      "76.05163306836769\n",
      "76.04304280021759\n",
      "76.03446430095117\n",
      "76.02589754348395\n",
      "76.017342500807\n",
      "76.00879914598686\n",
      "76.00026745216478\n",
      "75.99174739255676\n",
      "75.98323894045343\n",
      "75.97474206921936\n",
      "75.96625675229366\n",
      "75.95778296318896\n",
      "75.94932067549149\n",
      "75.94086986286096\n",
      "75.93243049903027\n",
      "75.92400255780473\n",
      "75.91558601306315\n",
      "75.90718083875635\n",
      "75.89878700890732\n",
      "75.89040449761147\n",
      "75.88203327903568\n",
      "75.87367332741849\n",
      "75.86532461706992\n",
      "75.85698712237111\n",
      "75.84866081777417\n",
      "75.8403456778018\n",
      "75.83204167704748\n",
      "75.82374879017475\n",
      "75.81546699191696\n",
      "75.80719625707806\n",
      "75.79893656053099\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "75.7906878772185\n",
      "75.78245018215243\n",
      "75.77422345041367\n",
      "75.76600765715187\n",
      "75.75780277758534\n",
      "75.7496087870007\n",
      "75.74142566075271\n",
      "75.73325337426448\n",
      "75.72509190302604\n",
      "75.71694122259598\n",
      "75.70880130859955\n",
      "75.70067213672945\n",
      "75.69255368274528\n",
      "75.68444592247317\n",
      "75.67634883180631\n",
      "75.66826238670347\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-5-d02efebf2b07>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     45\u001b[0m     \u001b[0mw0\u001b[0m \u001b[0;34m-=\u001b[0m \u001b[0mq0\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;36m0.000001\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 47\u001b[0;31m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/ipykernel/iostream.py\u001b[0m in \u001b[0;36mwrite\u001b[0;34m(self, string)\u001b[0m\n\u001b[1;32m    402\u001b[0m             \u001b[0mis_child\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_master_process\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    403\u001b[0m             \u001b[0;31m# only touch the buffer in the IO thread to avoid races\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 404\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpub_thread\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mschedule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_buffer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstring\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    405\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_child\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    406\u001b[0m                 \u001b[0;31m# mp.Pool cannot be trusted to flush promptly (or ever),\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/ipykernel/iostream.py\u001b[0m in \u001b[0;36mschedule\u001b[0;34m(self, f)\u001b[0m\n\u001b[1;32m    203\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_events\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    204\u001b[0m             \u001b[0;31m# wake event thread (message content is ignored)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 205\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_event_pipe\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mb''\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    206\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    207\u001b[0m             \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/zmq/sugar/socket.py\u001b[0m in \u001b[0;36msend\u001b[0;34m(self, data, flags, copy, track, routing_id, group)\u001b[0m\n\u001b[1;32m    398\u001b[0m                                  copy_threshold=self.copy_threshold)\n\u001b[1;32m    399\u001b[0m             \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroup\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgroup\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 400\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mSocket\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrack\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    401\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    402\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0msend_multipart\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmsg_parts\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.send\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.send\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket._send_copy\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/zmq/backend/cython/checkrc.pxd\u001b[0m in \u001b[0;36mzmq.backend.cython.checkrc._check_rc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "    w = []\n",
    "    w0 = 0\n",
    "    s = 0\n",
    "    d = df.shape[1] - 1\n",
    "    for j in range (d):\n",
    "        w.append(0)\n",
    "        \n",
    "    for u in range(1000):\n",
    "        f = []\n",
    "        for a in range (len(Y)):\n",
    "            for j in range (d):\n",
    "                s += w[j] * X[a][j]\n",
    "            ax = w0 + s\n",
    "            s = 0\n",
    "            f.append(ax) \n",
    "        len(f)\n",
    "\n",
    "        error = 0\n",
    "        for h in range (len(Y)):\n",
    "            error += (f[h] - Y[h])**2\n",
    "        error = error/len(X)\n",
    "\n",
    "        q = []\n",
    "        s = 0\n",
    "        for a in range (d):  \n",
    "            for h in range (len(X)):\n",
    "                Q1 = (f[h] - Y[h])*X[h][a] * 2 / len(X)\n",
    "                s += Q1\n",
    "            q.append(s)\n",
    "            s = 0\n",
    "        #print(q)\n",
    "\n",
    "    \n",
    "\n",
    "        for j in range(d):\n",
    "            w[j] = w[j] - q[j]*0.000001\n",
    "         #print(w)\n",
    "\n",
    "        s = 0\n",
    "        for a in range (len(X)):\n",
    "            Q0 = (f[a] - Y[a])*2 / len(X)\n",
    "            s += Q0\n",
    "        q0 = s\n",
    "\n",
    "        w0 -= q0*0.000001\n",
    "\n",
    "        print(error)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
